---
title: "Panels"
---

This page showcases panels implemented in [iSEE][bioc-iSEE] and its known extensions.

Panels are grouped by package in which their are implemented (see the floating table of contents on the right).

Each panel is introduced by a brief description above a single screenshot that illustrates a representative output,
and the code used to produce that particular panel output in a live app.

::: {.callout-note}
Bear in mind that all those panel classes come with many options to alter their respective outputs.
This gallery showcases only a fraction of what each of those panels can do.
In all likelihood, if a panel seems to do *almost* what you have in mind, then there are options to make it do *exactly* that.
Otherwise, options can be added, and more panel classes can be created; check out our [resources](./resources.html) to learn how!
:::

## iSEE

### ColumnDataPlot

Visualise any combination of sample metadata stored in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `ColumnDataPlot` panel class.](images/panels/iSEE/ColumnDataPlot.png)

::: {.callout-caution collapse="true"}
## Reproduce This Output

```{r, eval=FALSE}
library(iSEE)
library(scRNAseq)
library(scater)

# Example data ----
sce <- ReprocessedAllenData(assays="tophat_counts")

sce <- logNormCounts(sce, exprs_values="tophat_counts")

# launch the app itself ----

app <- iSEE(sce, initial = list(
  ColumnDataPlot(
    PanelWidth = 8L,
    YAxis = "NREADS",
    XAxis = "Column data",
    XAxisColumnData = "driver_1_s",
    ColorBy = "Column data",
    ColorByColumnData = "driver_1_s",
    FacetColumnBy = "Column data",
    FacetColumnByColData = "Core.Type"
    )
))

if (interactive()) {
  shiny::runApp(app, port=1234)
}
```
:::


### ColumnDataTable

Browser and filter sample metadata stored in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `ColumnDataTable` panel class.](images/panels/iSEE/ColumnDataTable.png)

::: {.callout-caution collapse="true"}
## Reproduce This Output

```{r, eval=FALSE}
library(iSEE)
library(scRNAseq)
library(scater)

# Example data ----
sce <- ReprocessedAllenData(assays="tophat_counts")

sce <- logNormCounts(sce, exprs_values="tophat_counts")

# launch the app itself ----

app <- iSEE(sce, initial = list(
  ColumnDataTable(
    PanelWidth = 12L
  )
))

if (interactive()) {
  shiny::runApp(app, port=1234)
}
```
:::

### ComplexHeatmapPlot

Visualise any number of features and samples in any assay stored in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `ComplexHeatmapPlot` panel class.](images/panels/iSEE/ComplexHeatmapPlot.png)

::: {.callout-caution collapse="true"}
## Reproduce This Output

```{r, eval=FALSE}
library(iSEE)
library(scRNAseq)
library(scater)
library(tibble)
library(dplyr)

# Example data ----
sce <- ReprocessedAllenData(assays="tophat_counts")

sce <- logNormCounts(sce, exprs_values="tophat_counts")

rowData(sce)$ave_count <- rowMeans(assay(sce, "tophat_counts"))
rowData(sce)$n_cells <- rowSums(assay(sce, "tophat_counts") > 0)
rowData(sce)$row_var <- rowVars(assay(sce, "logcounts"))

# launch the app itself ----

# top 10 genes with highest variance in logcounts
gene_list <- c("Lamp5", "Fam19a1", "Cnr1", "Rorb", "Sparcl1", "Crym", "Lmo3",  "Serpine2", "Ddah1", "Cux2")

app <- iSEE(sce, initial = list(
  ComplexHeatmapPlot(
    PanelWidth = 12L,
    CustomRows = TRUE,
    CustomRowsText = paste0(paste0(gene_list, collapse = "\n"), "\n"),
    ColumnData = "driver_1_s",
    RowData = "row_var"
  )
))

if (interactive()) {
  shiny::runApp(app, port=1234)
}
```
:::

### FeatureAssayPlot

Visualise up to two features in any assay stored in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `FeatureAssayPlot` panel class.](images/panels/iSEE/FeatureAssayPlot.png)

::: {.callout-caution collapse="true"}
## Reproduce This Output

```{r, eval=FALSE}
library(iSEE)
library(scRNAseq)
library(scater)

# Example data ----
sce <- ReprocessedAllenData(assays="tophat_counts")

sce <- logNormCounts(sce, exprs_values="tophat_counts")

# launch the app itself ----

app <- iSEE(sce, initial = list(
  FeatureAssayPlot(
    PanelWidth = 12L,
    YAxisFeatureName = "Rorb",
    XAxis = "Column data", XAxisColumnData = "driver_1_s",
    ColorBy = "Column data", ColorByColumnData = "driver_1_s",
    FacetColumnBy = "Column data", FacetColumnByColData = "Core.Type"
  )
))

if (interactive()) {
  shiny::runApp(app, port=1234)
}
```
:::

### ReducedDimensionPlot

Visualise any two dimensions of any dimensionality reduction result stored in a [`SingleCellExperiment`][bioc-SingleCellExperiment] object.

![The `ReducedDimensionPlot` panel class.](images/panels/iSEE/ReducedDimensionPlot.png)

::: {.callout-caution collapse="true"}
## Reproduce This Output

```{r, eval=FALSE}
library(iSEE)
library(scRNAseq)
library(scater)

# Example data ----

sce <- ReprocessedAllenData(assays="tophat_counts")

sce <- logNormCounts(sce, exprs_values="tophat_counts")

sce <- runPCA(sce, ncomponents=4)
sce <- runUMAP(sce)

# launch the app itself ----

app <- iSEE(sce, initial = list(
  ReducedDimensionPlot(
    PanelWidth = 8L,
    Type = "UMAP",
    ColorBy = "Column data", ColorByColumnData = "driver_1_s")))

if (interactive()) {
  shiny::runApp(app, port=1234)
}
```
:::

### RowDataPlot

Visualise any combination of feature metadata stored in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `RowDataPlot` panel class.](images/panels/iSEE/RowDataPlot.png)

::: {.callout-caution collapse="true"}
## Reproduce This Output

```{r, eval=FALSE}
library(iSEE)
library(scRNAseq)
library(scater)

# Example data ----

sce <- ReprocessedAllenData(assays="tophat_counts")

sce <- logNormCounts(sce, exprs_values="tophat_counts")

rowData(sce)$row_var <- rowVars(assay(sce, "logcounts"))
rowData(sce)$n_cells <- rowSums(assay(sce, "logcounts") > 0)

# launch the app itself ----

app <- iSEE(sce, initial = list(
  RowDataPlot(
    PanelWidth = 12L,
    YAxis = "row_var",
    XAxis = "Row data",
    XAxisRowData = "n_cells"
  )
))

if (interactive()) {
  shiny::runApp(app, port=1234)
}
```
:::

### RowDataTable

::: {.callout-caution collapse="true"}
## Reproduce This Output

```{r, eval=FALSE}
library(iSEE)
library(scRNAseq)

# Example data ----

sce <- ReprocessedAllenData(assays="tophat_counts")

rowData(sce)$ave_count <- rowMeans(assay(sce, "tophat_counts"))
rowData(sce)$n_cells <- rowSums(assay(sce, "tophat_counts") > 0)

# launch the app itself ----

app <- iSEE(sce, initial = list(
  RowDataTable(
    PanelWidth = 12L
  )
))

if (interactive()) {
  shiny::runApp(app, port=1234)
}
```
:::

Browser and filter feature metadata stored in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `RowDataTable` panel class.](images/panels/iSEE/RowDataTable.png)

### SampleAssayPlot

Visualise up to two samples in any assay stored in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `SampleAssayPlot` panel class.](images/panels/iSEE/SampleAssayPlot.png)

::: {.callout-caution collapse="true"}
## Reproduce This Output

```{r, eval=FALSE}
library(iSEE)
library(scRNAseq)
library(scater)

# Example data ----

sce <- ReprocessedAllenData(assays="tophat_counts")

sce <- logNormCounts(sce, exprs_values="tophat_counts")

rowData(sce)$row_var <- rowVars(assay(sce, "logcounts"))

# launch the app itself ----

app <- iSEE(sce, initial = list(
  SampleAssayPlot(
    PanelWidth = 12L,
    YAxisSampleName = "SRR2140028",
    XAxis = "Sample name", XAxisSampleName = "SRR2140022",
    ColorBy = "Row data", ColorByRowData = "row_var"
  )
))

if (interactive()) {
  shiny::runApp(app, port=1234)
}
```
:::

## iSEEde

### DETable

Browse and filter any table of differential expression results embedded in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `DETable` panel class.](images/panels/iSEEde/DETable.png)

::: {.callout-caution collapse="true"}
## Reproduce This Output

```{r, eval=FALSE}
library(iSEE)
library(iSEEde)
library(airway)
library(DESeq2)

# Example data ----

data("airway")
airway$dex <- relevel(airway$dex, "untrt")

dds <- DESeqDataSet(airway, ~ 0 + dex + cell)

dds <- DESeq(dds)
res_deseq2 <- results(dds, contrast = list("dextrt", "dexuntrt"))

# iSEE / iSEEde ---

airway <- embedContrastResults(res_deseq2, airway, name = "dex: trt vs untrt")

app <- iSEE(airway, initial = list(
  DETable(
    PanelWidth = 12L,
    ContrastName="dex: trt vs untrt",
    RoundDigits = TRUE
  )
))

if (interactive()) {
  shiny::runApp(app)
}
```
:::

### LogFCLogFCPlot

Visualise the log-transformed fold-changes of any two differential expression contrasts embedded in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `LogFCLogFCPlot` panel class.](images/panels/iSEEde/LogFCLogFCPlot.png)

### MAPlot

Visualise the M and A values of any differential expression contrast embedded in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `MAPlot` panel class.](images/panels/iSEEde/MAPlot.png)

### VolcanoPlot

Visualise the P values and log-transformed fold-changes of any differential expression contrast embedded in a [`SummarizedExperiment`][bioc-SummarizedExperiment] object.

![The `VolcanoPlot` panel class.](images/panels/iSEEde/VolcanoPlot.png)

## iSEEhex

### ReducedDimensionHexPlot

Same as [`ReducedDimensionPlot`](#reduceddimensionplot) but summarised using hexagonal bins.

![The `ReducedDimensionHexPlot` panel class.](images/panels/iSEEhex/ReducedDimensionHexPlot.png)

<!-- Links -->

[bioc-iSEE]: https://bioconductor.org/packages/iSEE/
[bioc-SingleCellExperiment]: https://bioconductor.org/packages/SingleCellExperiment/
[bioc-SummarizedExperiment]: https://bioconductor.org/packages/SummarizedExperiment/